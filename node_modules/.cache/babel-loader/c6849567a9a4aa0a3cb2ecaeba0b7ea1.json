{"ast":null,"code":"var _jsxFileName = \"/Users/AndresMO/Desktop/MASTER_UCM/store/src/context.js\";\nimport React, { Component } from \"react\";\nimport { storeProducts, detailProduct } from \"./data\";\n{\n  /* Context.js hace que no tengamos que pasar los productos cada vez que\n  los tengamos que usar. Lo que hacemos es que fijamos los productos en el\n  state de ProductContext.Provider value={productos}\n  */\n}\nconst ProductContext = React.createContext(); //Provider. Da toda la información a la App\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: storeProducts,\n      detailProduct: detailProduct\n    };\n\n    this.handleDetail = () => {\n      console.log(\"hello from handledetail\");\n    };\n\n    this.addToCart = () => {\n      console.log(\"hello from addToCart\");\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n/* ...this.state Para pasar el state de todos\n  además, como value es un objeto, le metemos las propiedades\n  que va a tener: handleDetail, addToCart..*/\n//Consumer. Para coger la información en cualquier parte de la App.\n\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer }; // Ahora hay que añadir ProductProvider al principio del DOM en index.js","map":{"version":3,"sources":["/Users/AndresMO/Desktop/MASTER_UCM/store/src/context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","handleDetail","console","log","addToCart","render","props","children","ProductConsumer","Consumer"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,aAAR,EAAuBC,aAAvB,QAA2C,QAA3C;AACA;AAAC;;;;AAGE;AAGH,MAAMC,cAAc,GAAGJ,KAAK,CAACK,aAAN,EAAvB,C,CACA;;AAIA,MAAMC,eAAN,SAA8BL,SAA9B,CAAuC;AAAA;AAAA;AAAA,SACrCM,KADqC,GAC/B;AACJC,MAAAA,QAAQ,EAACN,aADL;AAEJC,MAAAA,aAAa,EAACA;AAFV,KAD+B;;AAAA,SAMrCM,YANqC,GAMxB,MAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,KARoC;;AAAA,SAUrCC,SAVqC,GAU3B,MAAI;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAZoC;AAAA;;AAcrCE,EAAAA,MAAM,GAAI;AACR,wBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,MAAA,KAAK,EAAE,EAC9B,GAAG,KAAKN,KADsB;AAE9BE,QAAAA,YAAY,EAAE,KAAKA,YAFW;AAG9BG,QAAAA,SAAS,EAAE,KAAKA;AAHc,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,KAAKE,KAAL,CAAWC,QALd,CADF;AASD;;AAxBoC;AA2BvC;;;AAIA;;;AACA,MAAMC,eAAe,GAAGZ,cAAc,CAACa,QAAvC;AAEA,SAAQX,eAAR,EAAyBU,eAAzB,G,CAEA","sourcesContent":["import React, {Component} from \"react\";\nimport {storeProducts, detailProduct} from \"./data\";\n{/* Context.js hace que no tengamos que pasar los productos cada vez que\n los tengamos que usar. Lo que hacemos es que fijamos los productos en el\n state de ProductContext.Provider value={productos}\n*/}\n\n\nconst ProductContext = React.createContext();\n//Provider. Da toda la información a la App\n\n\n\nclass ProductProvider extends Component{\n  state={\n    products:storeProducts,\n    detailProduct:detailProduct\n  }\n\n  handleDetail=()=>{\n    console.log(\"hello from handledetail\");\n  }\n\n  addToCart=()=>{\n    console.log(\"hello from addToCart\");\n  }\n\n  render () {\n    return(\n      <ProductContext.Provider value={{\n        ...this.state,\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart\n      }}>\n        {this.props.children}\n      </ProductContext.Provider>\n    )\n  }\n}\n\n/* ...this.state Para pasar el state de todos\n  además, como value es un objeto, le metemos las propiedades\n  que va a tener: handleDetail, addToCart..*/\n\n//Consumer. Para coger la información en cualquier parte de la App.\nconst ProductConsumer = ProductContext.Consumer;\n\nexport {ProductProvider, ProductConsumer};\n\n// Ahora hay que añadir ProductProvider al principio del DOM en index.js\n"]},"metadata":{},"sourceType":"module"}